datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  comments      Comments[]
  items         Items[]
}

model Workshop {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  items       Items[]
}

model Items {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?    @db.ObjectId
  workshopId      String?    @db.ObjectId
  imageId         String?    @db.ObjectId
  category        Category
  name            String
  itemType        String
  dateOfPurchase  DateTime
  storageLocation String
  dateCreated     DateTime   @default(now())
  dateUpdated     DateTime   @updatedAt
  comments        Comments[]
  workshop        Workshop?  @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  image           Image?     @relation(fields: [imageId], references: [id])
  User            User?      @relation(fields: [userId], references: [id])
}

model Image {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  internalName String
  path         String
  Items        Items[]
}

model Comments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  itemsId     String?  @db.ObjectId
  content     String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  items       Items?   @relation(fields: [itemsId], references: [id], onDelete: Cascade)
}

enum Category {
  VERKTOY
  UTSTYR
}

enum Role {
  USER
  ADMIN
}
